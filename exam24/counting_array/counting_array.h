#ifndef PARADIGMS_COUNTING_ARRAY_H_
#define PARADIGMS_COUNTING_ARRAY_H_

#include <stdbool.h>

// ფუნქციის ტიპი რომელიც ადარებს გადმოცემულ მისამართებზე მყოფ მნიშვნელობებს.
// აბრუნებს უარყოფით რიცხვს თუ პირველი ნაკლებია მეორეზე, დადებით რიცხვს თუ პირველი
// მეტია მეორეზე და ნულს თუ მნიშვნელობები ტოლია.
typedef int(*CmpFn)(void*, void*);

// ფუნქციის ტიპი რომელიც ათავისფულებს გადმოცემულ მისამართზე შენახული ელემენტის მეხსიერებას.
typedef void(*FreeFn)(void*);

typedef struct {
  void* elems;
  int elem_size;
  int log_len;
  int alloc_len;
  CmpFn cmp_fn;
  FreeFn free_fn;
} CountingArray;

// ინიციალიზაცია უნდა გაუკეთოს გადმოცემულ CountingArray ობიექტს. არგუმენტებად იღებს:
// * ელემენტების ზომას ბაიტებში
// * ელემენტების შედარების ფუნცქიაზე მიმთითებელს
// * ელემენტების მეხსიერების გამათავისუფლებელ ფუნქციაზე მიმთითებლებს (თუ ასეთი საჭიროა)
void CountingArrayInit(CountingArray* a, int elem_size, CmpFn cmp_fn, FreeFn free_fn);

int find_index(CountingArray* a, void* elem);

void* find(CountingArray* a, void* elem);

// უნდა გაათავისუფლოს გადმოცემული მასივის მიერ გამოყენებული მეხსიერება.
void CountingArrayDestroy(CountingArray* a);

// უნდა დააბრუნოს მასივში შენახული **განსხვავებული** ელემენტების რაოდენობა.
int CountingArraySize(CountingArray* a);

// უნდა დააბურნოს მოცემულ ინდექსზე არსებული ელემენტის მისამართი.
// უკან **არ უნდა** დააბრუნოს მოცემული ელემენტის მეხსიერებაზე მფლობელობა.
void* CountingArrayGet(CountingArray* a, int index);

// მასივში უნდა დაამატოს გადმოცემული ელემენტი და **აიღოს მის მეხსიერებაზე მფლობელობა (დუბლიკატების შემთხვევაშიც)**.
// გადმოცემული ელემენტები უნდა ინახებოდეს მათი მნიშვნელობების ზრდადობის მიმდევრობით.
// თუ დასამატებელი ელემენტი მასივში უკვე გვხვდება, მაშინ მასივის ზომა უცვლელი უნდა დარჩეს და მხოლოდ გადმოცემული ელემენტის მთვლელი უნდა გაიზარდოს.
bool CountingArrayInsert(CountingArray* a, void* elem);

// მასივიდან უნდა წაშალოს მოცემული ელემენტის მხოლოდ ერთი მნიშვნელობა.
// მაგალითად თუ წასაშლელი ელემენტი მასივში ორჯერ არის შენახული, მაშინ მისი წაშლის შემდეგ მასივის ზომა უცვლელი უნდა დარჩეს ხოლო წასაშლელ მნიშვნელობაზე მასივმა უნდა შეამციროს მისი მთვლელი 2-დან 1-მდე.
// თუ გადმოცემული ელემენტი მასივში არ გვხვდება, მაშინ მისი წაშლის შემდეგ მასივი უცვლელი უნდა დარჩეს.
void CountingArrayRemove(CountingArray* a, void* elem);

// o მასივის ყველა ელემენტი უნდა დაემატოს a მასივში.
// **მთლიანად იღებს მფლობელობას** o მასივზე და მის შიგთავსზე.
void CountingArrayMerge(CountingArray* a, CountingArray* o);

#endif // PARADIGMS_COUNTING_ARRAY_H_
